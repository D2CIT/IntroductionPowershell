##############################################
# cmdlets gebruikt in voorbeelden
##############################################
    Get-ChildItem
    Get-Service
    Get-Process

##############################################
# veel gebruikte cmdlets
##############################################
    Get-Help
    Get-Command
    Get-Alias
    Where-Object
    ForEach-Object
    Select-Object
    Sort-Object
    Format-Table
    Format-List
    Format-Wide
    Write-host

##############################################
# Herhalen
##############################################
    Dir
    Get-Alias dir
        Get-Alias -Definition Get-ChildItem

    Get-Help Get-ChildItem
        Get-Help Get-ChildItem -full
        Get-Help Get-ChildItem -examples
        Update-Help
            Save-Help -DestinationPath E:\Cursus\help 
            Update-Help -module * -SourcePath E:\Cursus\Help   

    Get-ChildItem -Path C:\Data  
    Get-ChildItem -Path C:\Data  | gm
    Get-ChildItem -Path C:\Data  | select *
        (Get-ChildItem -Path C:\Data).count
        (Get-ChildItem -Path C:\Data)[1]
        (Get-ChildItem -Path C:\Data)[1]  | Select-Object *

###########################################################################
# Sort-object
###########################################################################
    get-service | sort status 


###########################################################################
# Select-object
###########################################################################
    get-childitem -Path C:\Data -recurse | Select-Object Attributes,FullName,Exists,IsReadOnly,CreationTime,LastAccessTime,LastWriteTime
    get-childitem -Path C:\Data -recurse -filter * | Select-Object Attributes,FullName,Exists,IsReadOnly,CreationTime,LastAccessTime,LastWriteTime | Format-Table  *

    get-childitem -Path C:\Data -recurse -filter * | Select-Object Attributes,FullName,Exists,IsReadOnly,CreationTime,LastAccessTime,LastWriteTime | Out-File  E:\Cursus\output1.txt 
    get-childitem -Path C:\Data -recurse -filter * | Select-Object Attributes,FullName,Exists,IsReadOnly,CreationTime,LastAccessTime,LastWriteTime | Out-File  E:\Cursus\output2.txt | Format-Table *
    get-childitem -Path C:\Data -recurse -filter * | Select-Object Attributes,FullName,Exists,IsReadOnly,CreationTime,LastAccessTime,LastWriteTime | Format-Table -AutoSize | Out-File  E:\Cursus\output3.txt 

###########################################################################
#Export output to files (TXT,CSV,HTML)
###########################################################################
    #TXT
    get-childitem -Path C:\Data -recurse -filter * | Format-Table Attributes,FullName,name,DirectoryName,Exists,IsReadOnly,CreationTime,LastAccessTime,LastWriteTime | out-file  E:\Cursus\output5.txt 
    #CSV
    get-childitem -Path C:\Data -recurse -filter * | Select-Object Attributes,FullName,name,DirectoryName,Exists,IsReadOnly,CreationTime,LastAccessTime,LastWriteTime | Export-Csv -Path E:\Cursus\output1.csv -Delimiter ";" -NoTypeInformation	
    $Items = Import-Csv -Delimiter ";" E:\Cursus\output1.csv 
    #HTML
    $title = "Files and Folders: C:\Data"
    $Head  = "<head><font face=`"verdana`" color=`"green`">Introduction Cursus Powershell</font></head><BR><BR>"
    $body  = "<font face=`"verdana`" color=`"green`"> Datum : $(get-date)"
    $pre   = "<BR><b><h1><P>Generated by Powershell Introduction Sogeti</P></b></h1></font><font verdana size=`"2`">"
    $post  = "</font><font verdana size=`"3`" color=`"red`"><br><BR><strong>For details, contact Corporate IT.</strong></font>"
    get-childitem -Path C:\Data -recurse -filter * | 
            Select-Object Attributes,FullName,name,DirectoryName,Exists,IsReadOnly,CreationTime,LastAccessTime,LastWriteTime | 
                    ConvertTo-Html -Title $title -head $head -Body $body -Pre $pre -Post $post  | 
                            Out-File E:\Cursus\output1.html


###########################################################################
# links / rechts filteren
###########################################################################

    Get-Service -name wuauserv 
    Get-Service | Where {$_.name -eq "wuauserv"} 


###########################################################################
# If Statement
###########################################################################
	
    $this  = "test"
    $that  = "test2"
    $those = "powershell"
    $them  = "powershell"
    $we    = 10
    $they  = 10

    If ($this -eq $that) {
          # commands
          Write-host "voorwaarde 1 voldaan" -for Green
    } elseif ($those -ne $them) {
          # commands
          Write-host "voorwaarde 1 niet voldaan" -for red
          Write-host "voorwaarde 2 voldaan" -for green
    } elseif ($we -gt $they) {
          # commands
          Write-host "voorwaarde 1 niet voldaan" -for red
          Write-host "voorwaarde 2 niet voldaan" -for red
          Write-host "voorwaarde 3 voldaan" -for green
    } else {
          # commands
          Write-host "voorwaarde 1 niet voldaan" -ForegroundColor red
          Write-host "voorwaarde 2 niet voldaan" -ForegroundColor red
          Write-host "voorwaarde 3 niet voldaan" -ForegroundColor red
          Write-host "aan geen van de voorwaarden is voldaan" -ForegroundColor Yellow
    }#endIF


###########################################################################
# Foreach
###########################################################################
cls
$servers = "server01","server02"
$i       = 0
Foreach($hostname in $servers){
     # commands
     $i++
     Write-host "de $($i)e hostname is $hostname"
}


###########################################################################
# Combinatie van bovenstaande
###########################################################################
#$Computers   = Get-content c:\computers.txt
#$Computers   = @("Localhost","WST540P")
$Computers   = "Localhost","WST540P"
$Servicename = "WUAUSERV"
cls
$Report = Foreach($computer in $Computers){
            
            Write-host "test connection $computer" -NoNewline -ForegroundColor Yellow

                Try{ 
                    # Controlleer of de PC bereikbaar is
                    If(test-connection $computer -Count 1 -ErrorAction Stop){
                        # PC is bereikbaar
                        Write-host " -> bereikbaar" -ForegroundColor Green  #schrijf naar host
                       
                        # Ophalen services 
                        get-service -computername $computer -ErrorAction stop | 
                                where{$_.name -like $servicename} | 
                                    Sort name | 
                                        select name,StartType,Status,MachineName,DisplayName,DependentServices
                    }#endIf
                }catch{
                           
                    Write-host " -> NIET bereikbaar" -ForegroundColor Red #schrijf naar host

                }#endTryCatch

          }#endforeach

#export resultaat naar Host
$report | format-table -AutoSize